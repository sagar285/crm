// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  image         String?
  role          String          @default("USER")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  posts         Post[]
  pages         Page[]
  installations InstallPlugin[]
  Account       Account[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String        @id @default(cuid())
  title     String
  slug      String        @unique
  content   String        @db.Text
  published Boolean       @default(false)
  author    User?         @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  plugins   PostPlugins[]
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plugin {
  id            String          @id @default(cuid())
  name          String
  slug          String?         @unique
  version       String?
  type          String?
  description   String?
  category      String?
  enabled       Boolean         @default(true)
  config        Json?
  author        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  installations InstallPlugin[]
  posts         PostPlugins[]
}

model PostPlugins {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  plugin    Plugin   @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId  String
  createdAt DateTime @default(now())

  @@unique([postId, pluginId])
}

model InstallPlugin {
  id        String   @id @default(cuid())
  userId    String
  pluginId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id]) // Add this line
  plugin    Plugin   @relation(fields: [pluginId], references: [id]) // Add this line

  @@unique([userId, pluginId]) // Add this to prevent duplicate installations
}

enum Role {
  USER
  ADMIN
}
